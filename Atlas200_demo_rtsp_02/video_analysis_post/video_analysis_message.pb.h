// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_analysis_message.proto

#ifndef PROTOBUF_video_5fanalysis_5fmessage_2eproto__INCLUDED
#define PROTOBUF_video_5fanalysis_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_video_5fanalysis_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRegisterAppImpl();
void InitDefaultsRegisterApp();
void InitDefaultsCommonResponseImpl();
void InitDefaultsCommonResponse();
void InitDefaultsFrameIndexImpl();
void InitDefaultsFrameIndex();
void InitDefaultsObjectImpl();
void InitDefaultsObject();
void InitDefaultsImageSetImpl();
void InitDefaultsImageSet();
void InitDefaultsCarInferenceResultImpl();
void InitDefaultsCarInferenceResult();
void InitDefaultsMapTypeImpl();
void InitDefaultsMapType();
void InitDefaultsHumanInferenceResultImpl();
void InitDefaultsHumanInferenceResult();
void InitDefaultsFaceInferenceResultImpl();
void InitDefaultsFaceInferenceResult();
inline void InitDefaults() {
  InitDefaultsRegisterApp();
  InitDefaultsCommonResponse();
  InitDefaultsFrameIndex();
  InitDefaultsObject();
  InitDefaultsImageSet();
  InitDefaultsCarInferenceResult();
  InitDefaultsMapType();
  InitDefaultsHumanInferenceResult();
  InitDefaultsFaceInferenceResult();
}
}  // namespace protobuf_video_5fanalysis_5fmessage_2eproto
namespace ascend {
namespace presenter {
namespace video_analysis {
class CarInferenceResult;
class CarInferenceResultDefaultTypeInternal;
extern CarInferenceResultDefaultTypeInternal _CarInferenceResult_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class FaceInferenceResult;
class FaceInferenceResultDefaultTypeInternal;
extern FaceInferenceResultDefaultTypeInternal _FaceInferenceResult_default_instance_;
class FrameIndex;
class FrameIndexDefaultTypeInternal;
extern FrameIndexDefaultTypeInternal _FrameIndex_default_instance_;
class HumanInferenceResult;
class HumanInferenceResultDefaultTypeInternal;
extern HumanInferenceResultDefaultTypeInternal _HumanInferenceResult_default_instance_;
class ImageSet;
class ImageSetDefaultTypeInternal;
extern ImageSetDefaultTypeInternal _ImageSet_default_instance_;
class MapType;
class MapTypeDefaultTypeInternal;
extern MapTypeDefaultTypeInternal _MapType_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class RegisterApp;
class RegisterAppDefaultTypeInternal;
extern RegisterAppDefaultTypeInternal _RegisterApp_default_instance_;
}  // namespace video_analysis
}  // namespace presenter
}  // namespace ascend
namespace ascend {
namespace presenter {
namespace video_analysis {

enum ErrorCode {
  kErrorNone = 0,
  kErrorAppRegisterExist = 1,
  kErrorAppRegisterNoStorage = 2,
  kErrorAppRegisterType = 3,
  kErrorAppRegisterLimit = 4,
  kErrorAppDelete = 5,
  kErrorAppLost = 6,
  kErrorStorageLimit = 7,
  kErrorOther = 8,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = kErrorNone;
const ErrorCode ErrorCode_MAX = kErrorOther;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum CarInferenceType {
  kCarColor = 0,
  kCarBrand = 1,
  kCarPlate = 2,
  CarInferenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CarInferenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CarInferenceType_IsValid(int value);
const CarInferenceType CarInferenceType_MIN = kCarColor;
const CarInferenceType CarInferenceType_MAX = kCarPlate;
const int CarInferenceType_ARRAYSIZE = CarInferenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CarInferenceType_descriptor();
inline const ::std::string& CarInferenceType_Name(CarInferenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CarInferenceType_descriptor(), value);
}
inline bool CarInferenceType_Parse(
    const ::std::string& name, CarInferenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CarInferenceType>(
    CarInferenceType_descriptor(), name, value);
}
enum FaceInferenceType {
  kFaceAge = 0,
  kFaceGender = 1,
  FaceInferenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FaceInferenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FaceInferenceType_IsValid(int value);
const FaceInferenceType FaceInferenceType_MIN = kFaceAge;
const FaceInferenceType FaceInferenceType_MAX = kFaceGender;
const int FaceInferenceType_ARRAYSIZE = FaceInferenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FaceInferenceType_descriptor();
inline const ::std::string& FaceInferenceType_Name(FaceInferenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FaceInferenceType_descriptor(), value);
}
inline bool FaceInferenceType_Parse(
    const ::std::string& name, FaceInferenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FaceInferenceType>(
    FaceInferenceType_descriptor(), name, value);
}
// ===================================================================

class RegisterApp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.RegisterApp) */ {
 public:
  RegisterApp();
  virtual ~RegisterApp();

  RegisterApp(const RegisterApp& from);

  inline RegisterApp& operator=(const RegisterApp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterApp(RegisterApp&& from) noexcept
    : RegisterApp() {
    *this = ::std::move(from);
  }

  inline RegisterApp& operator=(RegisterApp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterApp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterApp* internal_default_instance() {
    return reinterpret_cast<const RegisterApp*>(
               &_RegisterApp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RegisterApp* other);
  friend void swap(RegisterApp& a, RegisterApp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterApp* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterApp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterApp& from);
  void MergeFrom(const RegisterApp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterApp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.RegisterApp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsRegisterAppImpl();
};
// -------------------------------------------------------------------

class CommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CommonResponse* other);
  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .ascend.presenter.video_analysis.ErrorCode ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::ascend::presenter::video_analysis::ErrorCode ret() const;
  void set_ret(::ascend::presenter::video_analysis::ErrorCode value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.CommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsCommonResponseImpl();
};
// -------------------------------------------------------------------

class FrameIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.FrameIndex) */ {
 public:
  FrameIndex();
  virtual ~FrameIndex();

  FrameIndex(const FrameIndex& from);

  inline FrameIndex& operator=(const FrameIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameIndex(FrameIndex&& from) noexcept
    : FrameIndex() {
    *this = ::std::move(from);
  }

  inline FrameIndex& operator=(FrameIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameIndex* internal_default_instance() {
    return reinterpret_cast<const FrameIndex*>(
               &_FrameIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FrameIndex* other);
  friend void swap(FrameIndex& a, FrameIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameIndex& from);
  void MergeFrom(const FrameIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_app_id(::std::string&& value);
  #endif
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // string channel_id = 2;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_id(::std::string&& value);
  #endif
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // string channel_name = 3;
  void clear_channel_name();
  static const int kChannelNameFieldNumber = 3;
  const ::std::string& channel_name() const;
  void set_channel_name(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_name(::std::string&& value);
  #endif
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  ::std::string* mutable_channel_name();
  ::std::string* release_channel_name();
  void set_allocated_channel_name(::std::string* channel_name);

  // string frame_id = 4;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 4;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.FrameIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr channel_id_;
  ::google::protobuf::internal::ArenaStringPtr channel_name_;
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsFrameIndexImpl();
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // bytes image = 3;
  void clear_image();
  static const int kImageFieldNumber = 3;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // float confidence = 2;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 2;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  float confidence_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsObjectImpl();
};
// -------------------------------------------------------------------

class ImageSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.ImageSet) */ {
 public:
  ImageSet();
  virtual ~ImageSet();

  ImageSet(const ImageSet& from);

  inline ImageSet& operator=(const ImageSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageSet(ImageSet&& from) noexcept
    : ImageSet() {
    *this = ::std::move(from);
  }

  inline ImageSet& operator=(ImageSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSet* internal_default_instance() {
    return reinterpret_cast<const ImageSet*>(
               &_ImageSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ImageSet* other);
  friend void swap(ImageSet& a, ImageSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageSet* New() const PROTOBUF_FINAL { return New(NULL); }

  ImageSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImageSet& from);
  void MergeFrom(const ImageSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImageSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ascend.presenter.video_analysis.Object object = 3;
  int object_size() const;
  void clear_object();
  static const int kObjectFieldNumber = 3;
  const ::ascend::presenter::video_analysis::Object& object(int index) const;
  ::ascend::presenter::video_analysis::Object* mutable_object(int index);
  ::ascend::presenter::video_analysis::Object* add_object();
  ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::Object >*
      mutable_object();
  const ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::Object >&
      object() const;

  // bytes frame_image = 2;
  void clear_frame_image();
  static const int kFrameImageFieldNumber = 2;
  const ::std::string& frame_image() const;
  void set_frame_image(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_image(::std::string&& value);
  #endif
  void set_frame_image(const char* value);
  void set_frame_image(const void* value, size_t size);
  ::std::string* mutable_frame_image();
  ::std::string* release_frame_image();
  void set_allocated_frame_image(::std::string* frame_image);

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  const ::ascend::presenter::video_analysis::FrameIndex& frame_index() const;
  ::ascend::presenter::video_analysis::FrameIndex* release_frame_index();
  ::ascend::presenter::video_analysis::FrameIndex* mutable_frame_index();
  void set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.ImageSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::Object > object_;
  ::google::protobuf::internal::ArenaStringPtr frame_image_;
  ::ascend::presenter::video_analysis::FrameIndex* frame_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsImageSetImpl();
};
// -------------------------------------------------------------------

class CarInferenceResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.CarInferenceResult) */ {
 public:
  CarInferenceResult();
  virtual ~CarInferenceResult();

  CarInferenceResult(const CarInferenceResult& from);

  inline CarInferenceResult& operator=(const CarInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CarInferenceResult(CarInferenceResult&& from) noexcept
    : CarInferenceResult() {
    *this = ::std::move(from);
  }

  inline CarInferenceResult& operator=(CarInferenceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CarInferenceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarInferenceResult* internal_default_instance() {
    return reinterpret_cast<const CarInferenceResult*>(
               &_CarInferenceResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CarInferenceResult* other);
  friend void swap(CarInferenceResult& a, CarInferenceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarInferenceResult* New() const PROTOBUF_FINAL { return New(NULL); }

  CarInferenceResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CarInferenceResult& from);
  void MergeFrom(const CarInferenceResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CarInferenceResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  const ::ascend::presenter::video_analysis::FrameIndex& frame_index() const;
  ::ascend::presenter::video_analysis::FrameIndex* release_frame_index();
  ::ascend::presenter::video_analysis::FrameIndex* mutable_frame_index();
  void set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index);

  // .ascend.presenter.video_analysis.CarInferenceType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ascend::presenter::video_analysis::CarInferenceType type() const;
  void set_type(::ascend::presenter::video_analysis::CarInferenceType value);

  // float confidence = 4;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 4;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.CarInferenceResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::ascend::presenter::video_analysis::FrameIndex* frame_index_;
  int type_;
  float confidence_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsCarInferenceResultImpl();
};
// -------------------------------------------------------------------

class MapType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.MapType) */ {
 public:
  MapType();
  virtual ~MapType();

  MapType(const MapType& from);

  inline MapType& operator=(const MapType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapType(MapType&& from) noexcept
    : MapType() {
    *this = ::std::move(from);
  }

  inline MapType& operator=(MapType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MapType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapType* internal_default_instance() {
    return reinterpret_cast<const MapType*>(
               &_MapType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MapType* other);
  friend void swap(MapType& a, MapType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapType* New() const PROTOBUF_FINAL { return New(NULL); }

  MapType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapType& from);
  void MergeFrom(const MapType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.MapType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  float value_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsMapTypeImpl();
};
// -------------------------------------------------------------------

class HumanInferenceResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.HumanInferenceResult) */ {
 public:
  HumanInferenceResult();
  virtual ~HumanInferenceResult();

  HumanInferenceResult(const HumanInferenceResult& from);

  inline HumanInferenceResult& operator=(const HumanInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanInferenceResult(HumanInferenceResult&& from) noexcept
    : HumanInferenceResult() {
    *this = ::std::move(from);
  }

  inline HumanInferenceResult& operator=(HumanInferenceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanInferenceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanInferenceResult* internal_default_instance() {
    return reinterpret_cast<const HumanInferenceResult*>(
               &_HumanInferenceResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HumanInferenceResult* other);
  friend void swap(HumanInferenceResult& a, HumanInferenceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanInferenceResult* New() const PROTOBUF_FINAL { return New(NULL); }

  HumanInferenceResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HumanInferenceResult& from);
  void MergeFrom(const HumanInferenceResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HumanInferenceResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ascend.presenter.video_analysis.MapType human_property = 3;
  int human_property_size() const;
  void clear_human_property();
  static const int kHumanPropertyFieldNumber = 3;
  const ::ascend::presenter::video_analysis::MapType& human_property(int index) const;
  ::ascend::presenter::video_analysis::MapType* mutable_human_property(int index);
  ::ascend::presenter::video_analysis::MapType* add_human_property();
  ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::MapType >*
      mutable_human_property();
  const ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::MapType >&
      human_property() const;

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  const ::ascend::presenter::video_analysis::FrameIndex& frame_index() const;
  ::ascend::presenter::video_analysis::FrameIndex* release_frame_index();
  ::ascend::presenter::video_analysis::FrameIndex* mutable_frame_index();
  void set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.HumanInferenceResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::MapType > human_property_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::ascend::presenter::video_analysis::FrameIndex* frame_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsHumanInferenceResultImpl();
};
// -------------------------------------------------------------------

class FaceInferenceResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ascend.presenter.video_analysis.FaceInferenceResult) */ {
 public:
  FaceInferenceResult();
  virtual ~FaceInferenceResult();

  FaceInferenceResult(const FaceInferenceResult& from);

  inline FaceInferenceResult& operator=(const FaceInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FaceInferenceResult(FaceInferenceResult&& from) noexcept
    : FaceInferenceResult() {
    *this = ::std::move(from);
  }

  inline FaceInferenceResult& operator=(FaceInferenceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FaceInferenceResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceInferenceResult* internal_default_instance() {
    return reinterpret_cast<const FaceInferenceResult*>(
               &_FaceInferenceResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FaceInferenceResult* other);
  friend void swap(FaceInferenceResult& a, FaceInferenceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FaceInferenceResult* New() const PROTOBUF_FINAL { return New(NULL); }

  FaceInferenceResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FaceInferenceResult& from);
  void MergeFrom(const FaceInferenceResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FaceInferenceResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string object_id = 2;
  void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  const ::std::string& object_id() const;
  void set_object_id(const ::std::string& value);
  #if LANG_CXX11
  void set_object_id(::std::string&& value);
  #endif
  void set_object_id(const char* value);
  void set_object_id(const char* value, size_t size);
  ::std::string* mutable_object_id();
  ::std::string* release_object_id();
  void set_allocated_object_id(::std::string* object_id);

  // string value = 5;
  void clear_value();
  static const int kValueFieldNumber = 5;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
  bool has_frame_index() const;
  void clear_frame_index();
  static const int kFrameIndexFieldNumber = 1;
  const ::ascend::presenter::video_analysis::FrameIndex& frame_index() const;
  ::ascend::presenter::video_analysis::FrameIndex* release_frame_index();
  ::ascend::presenter::video_analysis::FrameIndex* mutable_frame_index();
  void set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index);

  // .ascend.presenter.video_analysis.FaceInferenceType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ascend::presenter::video_analysis::FaceInferenceType type() const;
  void set_type(::ascend::presenter::video_analysis::FaceInferenceType value);

  // float confidence = 4;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 4;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:ascend.presenter.video_analysis.FaceInferenceResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr object_id_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::ascend::presenter::video_analysis::FrameIndex* frame_index_;
  int type_;
  float confidence_;
  mutable int _cached_size_;
  friend struct ::protobuf_video_5fanalysis_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_video_5fanalysis_5fmessage_2eproto::InitDefaultsFaceInferenceResultImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterApp

// string id = 1;
inline void RegisterApp::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterApp::id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.RegisterApp.id)
  return id_.GetNoArena();
}
inline void RegisterApp::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.RegisterApp.id)
}
#if LANG_CXX11
inline void RegisterApp::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.RegisterApp.id)
}
#endif
inline void RegisterApp::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.RegisterApp.id)
}
inline void RegisterApp::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.RegisterApp.id)
}
inline ::std::string* RegisterApp::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.RegisterApp.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterApp::release_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.RegisterApp.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.RegisterApp.id)
}

// string type = 2;
inline void RegisterApp::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterApp::type() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.RegisterApp.type)
  return type_.GetNoArena();
}
inline void RegisterApp::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.RegisterApp.type)
}
#if LANG_CXX11
inline void RegisterApp::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.RegisterApp.type)
}
#endif
inline void RegisterApp::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.RegisterApp.type)
}
inline void RegisterApp::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.RegisterApp.type)
}
inline ::std::string* RegisterApp::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.RegisterApp.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterApp::release_type() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.RegisterApp.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterApp::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.RegisterApp.type)
}

// -------------------------------------------------------------------

// CommonResponse

// .ascend.presenter.video_analysis.ErrorCode ret = 1;
inline void CommonResponse::clear_ret() {
  ret_ = 0;
}
inline ::ascend::presenter::video_analysis::ErrorCode CommonResponse::ret() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CommonResponse.ret)
  return static_cast< ::ascend::presenter::video_analysis::ErrorCode >(ret_);
}
inline void CommonResponse::set_ret(::ascend::presenter::video_analysis::ErrorCode value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CommonResponse.ret)
}

// string message = 2;
inline void CommonResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonResponse::message() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CommonResponse.message)
  return message_.GetNoArena();
}
inline void CommonResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CommonResponse.message)
}
#if LANG_CXX11
inline void CommonResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.CommonResponse.message)
}
#endif
inline void CommonResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.CommonResponse.message)
}
inline ::std::string* CommonResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.CommonResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonResponse::release_message() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.CommonResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.CommonResponse.message)
}

// -------------------------------------------------------------------

// FrameIndex

// string app_id = 1;
inline void FrameIndex::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameIndex::app_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FrameIndex.app_id)
  return app_id_.GetNoArena();
}
inline void FrameIndex::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FrameIndex.app_id)
}
#if LANG_CXX11
inline void FrameIndex::set_app_id(::std::string&& value) {
  
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FrameIndex.app_id)
}
#endif
inline void FrameIndex::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FrameIndex.app_id)
}
inline void FrameIndex::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FrameIndex.app_id)
}
inline ::std::string* FrameIndex::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FrameIndex.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameIndex::release_app_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FrameIndex.app_id)
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameIndex::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FrameIndex.app_id)
}

// string channel_id = 2;
inline void FrameIndex::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameIndex::channel_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FrameIndex.channel_id)
  return channel_id_.GetNoArena();
}
inline void FrameIndex::set_channel_id(const ::std::string& value) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FrameIndex.channel_id)
}
#if LANG_CXX11
inline void FrameIndex::set_channel_id(::std::string&& value) {
  
  channel_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FrameIndex.channel_id)
}
#endif
inline void FrameIndex::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FrameIndex.channel_id)
}
inline void FrameIndex::set_channel_id(const char* value, size_t size) {
  
  channel_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FrameIndex.channel_id)
}
inline ::std::string* FrameIndex::mutable_channel_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FrameIndex.channel_id)
  return channel_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameIndex::release_channel_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FrameIndex.channel_id)
  
  return channel_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameIndex::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    
  } else {
    
  }
  channel_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FrameIndex.channel_id)
}

// string channel_name = 3;
inline void FrameIndex::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameIndex::channel_name() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FrameIndex.channel_name)
  return channel_name_.GetNoArena();
}
inline void FrameIndex::set_channel_name(const ::std::string& value) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FrameIndex.channel_name)
}
#if LANG_CXX11
inline void FrameIndex::set_channel_name(::std::string&& value) {
  
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FrameIndex.channel_name)
}
#endif
inline void FrameIndex::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FrameIndex.channel_name)
}
inline void FrameIndex::set_channel_name(const char* value, size_t size) {
  
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FrameIndex.channel_name)
}
inline ::std::string* FrameIndex::mutable_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FrameIndex.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameIndex::release_channel_name() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FrameIndex.channel_name)
  
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameIndex::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    
  } else {
    
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FrameIndex.channel_name)
}

// string frame_id = 4;
inline void FrameIndex::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FrameIndex::frame_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FrameIndex.frame_id)
  return frame_id_.GetNoArena();
}
inline void FrameIndex::set_frame_id(const ::std::string& value) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FrameIndex.frame_id)
}
#if LANG_CXX11
inline void FrameIndex::set_frame_id(::std::string&& value) {
  
  frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FrameIndex.frame_id)
}
#endif
inline void FrameIndex::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FrameIndex.frame_id)
}
inline void FrameIndex::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FrameIndex.frame_id)
}
inline ::std::string* FrameIndex::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FrameIndex.frame_id)
  return frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FrameIndex::release_frame_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FrameIndex.frame_id)
  
  return frame_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FrameIndex::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FrameIndex.frame_id)
}

// -------------------------------------------------------------------

// Object

// string id = 1;
inline void Object::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.Object.id)
  return id_.GetNoArena();
}
inline void Object::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.Object.id)
}
#if LANG_CXX11
inline void Object::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.Object.id)
}
#endif
inline void Object::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.Object.id)
}
inline void Object::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.Object.id)
}
inline ::std::string* Object::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.Object.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.Object.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.Object.id)
}

// float confidence = 2;
inline void Object::clear_confidence() {
  confidence_ = 0;
}
inline float Object::confidence() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.Object.confidence)
  return confidence_;
}
inline void Object::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.Object.confidence)
}

// bytes image = 3;
inline void Object::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::image() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.Object.image)
  return image_.GetNoArena();
}
inline void Object::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.Object.image)
}
#if LANG_CXX11
inline void Object::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.Object.image)
}
#endif
inline void Object::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.Object.image)
}
inline void Object::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.Object.image)
}
inline ::std::string* Object::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.Object.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_image() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.Object.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.Object.image)
}

// -------------------------------------------------------------------

// ImageSet

// .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
inline bool ImageSet::has_frame_index() const {
  return this != internal_default_instance() && frame_index_ != NULL;
}
inline void ImageSet::clear_frame_index() {
  if (GetArenaNoVirtual() == NULL && frame_index_ != NULL) {
    delete frame_index_;
  }
  frame_index_ = NULL;
}
inline const ::ascend::presenter::video_analysis::FrameIndex& ImageSet::frame_index() const {
  const ::ascend::presenter::video_analysis::FrameIndex* p = frame_index_;
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.ImageSet.frame_index)
  return p != NULL ? *p : *reinterpret_cast<const ::ascend::presenter::video_analysis::FrameIndex*>(
      &::ascend::presenter::video_analysis::_FrameIndex_default_instance_);
}
inline ::ascend::presenter::video_analysis::FrameIndex* ImageSet::release_frame_index() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.ImageSet.frame_index)
  
  ::ascend::presenter::video_analysis::FrameIndex* temp = frame_index_;
  frame_index_ = NULL;
  return temp;
}
inline ::ascend::presenter::video_analysis::FrameIndex* ImageSet::mutable_frame_index() {
  
  if (frame_index_ == NULL) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.ImageSet.frame_index)
  return frame_index_;
}
inline void ImageSet::set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_index_;
  }
  if (frame_index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_index, submessage_arena);
    }
    
  } else {
    
  }
  frame_index_ = frame_index;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.ImageSet.frame_index)
}

// bytes frame_image = 2;
inline void ImageSet::clear_frame_image() {
  frame_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageSet::frame_image() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.ImageSet.frame_image)
  return frame_image_.GetNoArena();
}
inline void ImageSet::set_frame_image(const ::std::string& value) {
  
  frame_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.ImageSet.frame_image)
}
#if LANG_CXX11
inline void ImageSet::set_frame_image(::std::string&& value) {
  
  frame_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.ImageSet.frame_image)
}
#endif
inline void ImageSet::set_frame_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.ImageSet.frame_image)
}
inline void ImageSet::set_frame_image(const void* value, size_t size) {
  
  frame_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.ImageSet.frame_image)
}
inline ::std::string* ImageSet::mutable_frame_image() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.ImageSet.frame_image)
  return frame_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageSet::release_frame_image() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.ImageSet.frame_image)
  
  return frame_image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageSet::set_allocated_frame_image(::std::string* frame_image) {
  if (frame_image != NULL) {
    
  } else {
    
  }
  frame_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame_image);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.ImageSet.frame_image)
}

// repeated .ascend.presenter.video_analysis.Object object = 3;
inline int ImageSet::object_size() const {
  return object_.size();
}
inline void ImageSet::clear_object() {
  object_.Clear();
}
inline const ::ascend::presenter::video_analysis::Object& ImageSet::object(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.ImageSet.object)
  return object_.Get(index);
}
inline ::ascend::presenter::video_analysis::Object* ImageSet::mutable_object(int index) {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.ImageSet.object)
  return object_.Mutable(index);
}
inline ::ascend::presenter::video_analysis::Object* ImageSet::add_object() {
  // @@protoc_insertion_point(field_add:ascend.presenter.video_analysis.ImageSet.object)
  return object_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::Object >*
ImageSet::mutable_object() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.video_analysis.ImageSet.object)
  return &object_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::Object >&
ImageSet::object() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.video_analysis.ImageSet.object)
  return object_;
}

// -------------------------------------------------------------------

// CarInferenceResult

// .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
inline bool CarInferenceResult::has_frame_index() const {
  return this != internal_default_instance() && frame_index_ != NULL;
}
inline void CarInferenceResult::clear_frame_index() {
  if (GetArenaNoVirtual() == NULL && frame_index_ != NULL) {
    delete frame_index_;
  }
  frame_index_ = NULL;
}
inline const ::ascend::presenter::video_analysis::FrameIndex& CarInferenceResult::frame_index() const {
  const ::ascend::presenter::video_analysis::FrameIndex* p = frame_index_;
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CarInferenceResult.frame_index)
  return p != NULL ? *p : *reinterpret_cast<const ::ascend::presenter::video_analysis::FrameIndex*>(
      &::ascend::presenter::video_analysis::_FrameIndex_default_instance_);
}
inline ::ascend::presenter::video_analysis::FrameIndex* CarInferenceResult::release_frame_index() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.CarInferenceResult.frame_index)
  
  ::ascend::presenter::video_analysis::FrameIndex* temp = frame_index_;
  frame_index_ = NULL;
  return temp;
}
inline ::ascend::presenter::video_analysis::FrameIndex* CarInferenceResult::mutable_frame_index() {
  
  if (frame_index_ == NULL) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.CarInferenceResult.frame_index)
  return frame_index_;
}
inline void CarInferenceResult::set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_index_;
  }
  if (frame_index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_index, submessage_arena);
    }
    
  } else {
    
  }
  frame_index_ = frame_index;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.CarInferenceResult.frame_index)
}

// string object_id = 2;
inline void CarInferenceResult::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInferenceResult::object_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CarInferenceResult.object_id)
  return object_id_.GetNoArena();
}
inline void CarInferenceResult::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CarInferenceResult.object_id)
}
#if LANG_CXX11
inline void CarInferenceResult::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.CarInferenceResult.object_id)
}
#endif
inline void CarInferenceResult::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.CarInferenceResult.object_id)
}
inline void CarInferenceResult::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.CarInferenceResult.object_id)
}
inline ::std::string* CarInferenceResult::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.CarInferenceResult.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInferenceResult::release_object_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.CarInferenceResult.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInferenceResult::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.CarInferenceResult.object_id)
}

// .ascend.presenter.video_analysis.CarInferenceType type = 3;
inline void CarInferenceResult::clear_type() {
  type_ = 0;
}
inline ::ascend::presenter::video_analysis::CarInferenceType CarInferenceResult::type() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CarInferenceResult.type)
  return static_cast< ::ascend::presenter::video_analysis::CarInferenceType >(type_);
}
inline void CarInferenceResult::set_type(::ascend::presenter::video_analysis::CarInferenceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CarInferenceResult.type)
}

// float confidence = 4;
inline void CarInferenceResult::clear_confidence() {
  confidence_ = 0;
}
inline float CarInferenceResult::confidence() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CarInferenceResult.confidence)
  return confidence_;
}
inline void CarInferenceResult::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CarInferenceResult.confidence)
}

// string value = 5;
inline void CarInferenceResult::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarInferenceResult::value() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.CarInferenceResult.value)
  return value_.GetNoArena();
}
inline void CarInferenceResult::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.CarInferenceResult.value)
}
#if LANG_CXX11
inline void CarInferenceResult::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.CarInferenceResult.value)
}
#endif
inline void CarInferenceResult::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.CarInferenceResult.value)
}
inline void CarInferenceResult::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.CarInferenceResult.value)
}
inline ::std::string* CarInferenceResult::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.CarInferenceResult.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarInferenceResult::release_value() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.CarInferenceResult.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarInferenceResult::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.CarInferenceResult.value)
}

// -------------------------------------------------------------------

// MapType

// string key = 1;
inline void MapType::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MapType::key() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.MapType.key)
  return key_.GetNoArena();
}
inline void MapType::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.MapType.key)
}
#if LANG_CXX11
inline void MapType::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.MapType.key)
}
#endif
inline void MapType::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.MapType.key)
}
inline void MapType::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.MapType.key)
}
inline ::std::string* MapType::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.MapType.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapType::release_key() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.MapType.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapType::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.MapType.key)
}

// float value = 2;
inline void MapType::clear_value() {
  value_ = 0;
}
inline float MapType::value() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.MapType.value)
  return value_;
}
inline void MapType::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.MapType.value)
}

// -------------------------------------------------------------------

// HumanInferenceResult

// .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
inline bool HumanInferenceResult::has_frame_index() const {
  return this != internal_default_instance() && frame_index_ != NULL;
}
inline void HumanInferenceResult::clear_frame_index() {
  if (GetArenaNoVirtual() == NULL && frame_index_ != NULL) {
    delete frame_index_;
  }
  frame_index_ = NULL;
}
inline const ::ascend::presenter::video_analysis::FrameIndex& HumanInferenceResult::frame_index() const {
  const ::ascend::presenter::video_analysis::FrameIndex* p = frame_index_;
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.HumanInferenceResult.frame_index)
  return p != NULL ? *p : *reinterpret_cast<const ::ascend::presenter::video_analysis::FrameIndex*>(
      &::ascend::presenter::video_analysis::_FrameIndex_default_instance_);
}
inline ::ascend::presenter::video_analysis::FrameIndex* HumanInferenceResult::release_frame_index() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.HumanInferenceResult.frame_index)
  
  ::ascend::presenter::video_analysis::FrameIndex* temp = frame_index_;
  frame_index_ = NULL;
  return temp;
}
inline ::ascend::presenter::video_analysis::FrameIndex* HumanInferenceResult::mutable_frame_index() {
  
  if (frame_index_ == NULL) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.HumanInferenceResult.frame_index)
  return frame_index_;
}
inline void HumanInferenceResult::set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_index_;
  }
  if (frame_index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_index, submessage_arena);
    }
    
  } else {
    
  }
  frame_index_ = frame_index;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.HumanInferenceResult.frame_index)
}

// string object_id = 2;
inline void HumanInferenceResult::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HumanInferenceResult::object_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
  return object_id_.GetNoArena();
}
inline void HumanInferenceResult::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
}
#if LANG_CXX11
inline void HumanInferenceResult::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
}
#endif
inline void HumanInferenceResult::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
}
inline void HumanInferenceResult::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
}
inline ::std::string* HumanInferenceResult::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HumanInferenceResult::release_object_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HumanInferenceResult::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.HumanInferenceResult.object_id)
}

// repeated .ascend.presenter.video_analysis.MapType human_property = 3;
inline int HumanInferenceResult::human_property_size() const {
  return human_property_.size();
}
inline void HumanInferenceResult::clear_human_property() {
  human_property_.Clear();
}
inline const ::ascend::presenter::video_analysis::MapType& HumanInferenceResult::human_property(int index) const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.HumanInferenceResult.human_property)
  return human_property_.Get(index);
}
inline ::ascend::presenter::video_analysis::MapType* HumanInferenceResult::mutable_human_property(int index) {
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.HumanInferenceResult.human_property)
  return human_property_.Mutable(index);
}
inline ::ascend::presenter::video_analysis::MapType* HumanInferenceResult::add_human_property() {
  // @@protoc_insertion_point(field_add:ascend.presenter.video_analysis.HumanInferenceResult.human_property)
  return human_property_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::MapType >*
HumanInferenceResult::mutable_human_property() {
  // @@protoc_insertion_point(field_mutable_list:ascend.presenter.video_analysis.HumanInferenceResult.human_property)
  return &human_property_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ascend::presenter::video_analysis::MapType >&
HumanInferenceResult::human_property() const {
  // @@protoc_insertion_point(field_list:ascend.presenter.video_analysis.HumanInferenceResult.human_property)
  return human_property_;
}

// -------------------------------------------------------------------

// FaceInferenceResult

// .ascend.presenter.video_analysis.FrameIndex frame_index = 1;
inline bool FaceInferenceResult::has_frame_index() const {
  return this != internal_default_instance() && frame_index_ != NULL;
}
inline void FaceInferenceResult::clear_frame_index() {
  if (GetArenaNoVirtual() == NULL && frame_index_ != NULL) {
    delete frame_index_;
  }
  frame_index_ = NULL;
}
inline const ::ascend::presenter::video_analysis::FrameIndex& FaceInferenceResult::frame_index() const {
  const ::ascend::presenter::video_analysis::FrameIndex* p = frame_index_;
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FaceInferenceResult.frame_index)
  return p != NULL ? *p : *reinterpret_cast<const ::ascend::presenter::video_analysis::FrameIndex*>(
      &::ascend::presenter::video_analysis::_FrameIndex_default_instance_);
}
inline ::ascend::presenter::video_analysis::FrameIndex* FaceInferenceResult::release_frame_index() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FaceInferenceResult.frame_index)
  
  ::ascend::presenter::video_analysis::FrameIndex* temp = frame_index_;
  frame_index_ = NULL;
  return temp;
}
inline ::ascend::presenter::video_analysis::FrameIndex* FaceInferenceResult::mutable_frame_index() {
  
  if (frame_index_ == NULL) {
    frame_index_ = new ::ascend::presenter::video_analysis::FrameIndex;
  }
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FaceInferenceResult.frame_index)
  return frame_index_;
}
inline void FaceInferenceResult::set_allocated_frame_index(::ascend::presenter::video_analysis::FrameIndex* frame_index) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frame_index_;
  }
  if (frame_index) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frame_index = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frame_index, submessage_arena);
    }
    
  } else {
    
  }
  frame_index_ = frame_index;
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FaceInferenceResult.frame_index)
}

// string object_id = 2;
inline void FaceInferenceResult::clear_object_id() {
  object_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceInferenceResult::object_id() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
  return object_id_.GetNoArena();
}
inline void FaceInferenceResult::set_object_id(const ::std::string& value) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
}
#if LANG_CXX11
inline void FaceInferenceResult::set_object_id(::std::string&& value) {
  
  object_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
}
#endif
inline void FaceInferenceResult::set_object_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
}
inline void FaceInferenceResult::set_object_id(const char* value, size_t size) {
  
  object_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
}
inline ::std::string* FaceInferenceResult::mutable_object_id() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
  return object_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceInferenceResult::release_object_id() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
  
  return object_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceInferenceResult::set_allocated_object_id(::std::string* object_id) {
  if (object_id != NULL) {
    
  } else {
    
  }
  object_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object_id);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FaceInferenceResult.object_id)
}

// .ascend.presenter.video_analysis.FaceInferenceType type = 3;
inline void FaceInferenceResult::clear_type() {
  type_ = 0;
}
inline ::ascend::presenter::video_analysis::FaceInferenceType FaceInferenceResult::type() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FaceInferenceResult.type)
  return static_cast< ::ascend::presenter::video_analysis::FaceInferenceType >(type_);
}
inline void FaceInferenceResult::set_type(::ascend::presenter::video_analysis::FaceInferenceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FaceInferenceResult.type)
}

// float confidence = 4;
inline void FaceInferenceResult::clear_confidence() {
  confidence_ = 0;
}
inline float FaceInferenceResult::confidence() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FaceInferenceResult.confidence)
  return confidence_;
}
inline void FaceInferenceResult::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FaceInferenceResult.confidence)
}

// string value = 5;
inline void FaceInferenceResult::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FaceInferenceResult::value() const {
  // @@protoc_insertion_point(field_get:ascend.presenter.video_analysis.FaceInferenceResult.value)
  return value_.GetNoArena();
}
inline void FaceInferenceResult::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ascend.presenter.video_analysis.FaceInferenceResult.value)
}
#if LANG_CXX11
inline void FaceInferenceResult::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ascend.presenter.video_analysis.FaceInferenceResult.value)
}
#endif
inline void FaceInferenceResult::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ascend.presenter.video_analysis.FaceInferenceResult.value)
}
inline void FaceInferenceResult::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ascend.presenter.video_analysis.FaceInferenceResult.value)
}
inline ::std::string* FaceInferenceResult::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:ascend.presenter.video_analysis.FaceInferenceResult.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FaceInferenceResult::release_value() {
  // @@protoc_insertion_point(field_release:ascend.presenter.video_analysis.FaceInferenceResult.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FaceInferenceResult::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:ascend.presenter.video_analysis.FaceInferenceResult.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace video_analysis
}  // namespace presenter
}  // namespace ascend

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ascend::presenter::video_analysis::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::video_analysis::ErrorCode>() {
  return ::ascend::presenter::video_analysis::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::ascend::presenter::video_analysis::CarInferenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::video_analysis::CarInferenceType>() {
  return ::ascend::presenter::video_analysis::CarInferenceType_descriptor();
}
template <> struct is_proto_enum< ::ascend::presenter::video_analysis::FaceInferenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ascend::presenter::video_analysis::FaceInferenceType>() {
  return ::ascend::presenter::video_analysis::FaceInferenceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_video_5fanalysis_5fmessage_2eproto__INCLUDED
